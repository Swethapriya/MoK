DBMS - Data Base Management System
technology of storing and retrieving users’ data with utmost efficiency along with appropriate security measures.

Less redundancy − DBMS follows the rules of normalization, 
which splits a relation when any of its attributes is having redundancy in values.

In 1-tier architecture, the DBMS is the only entity where the user directly sits on the DBMS and uses it. 
Any changes done here will directly be done on the DBMS itself. It does not provide handy tools for end-users.
Database designers and programmers normally prefer to use single-tier architecture.

If the architecture of DBMS is 2-tier, then it must have an application through which the DBMS can be accessed.

A 3-tier architecture separates its tiers from each other based on the complexity of the users 
and how they use the data present in the database.It is the most widely used architecture to design a DBMS.
Database (Data) Tier − At this tier, the database resides along with its query processing languages. 
					  We also have the relations that define the data and their constraints at this level.
Application (Middle) Tier - At this tier reside the application server and the programs that access the database. 
                            For a user, this application tier presents an abstracted view of the database.
User (Presentation) Tier − End-users operate on this tier and they know nothing about any existence of the database 
							beyond this layer. 

ER Model is based on −

Entities and their attributes
Relationships among entities.

Physical Database Schema − This schema pertains to the actual storage of data and its form of storage like files, 
							indices, etc. It defines how the data will be stored in a secondary storage.

Logical Database Schema − This schema defines all the logical constraints that need to be applied on the data stored. 
						It defines tables, views, and integrity constraints.

Logical data is data about database, that is, it stores information about how data is managed inside. 
For example, a table (relation) stored in the database and all its constraints, applied on that relation.

Physical data independence is the power to change the physical data without impacting the schema or logical data.

For example, in case we want to change or upgrade the storage system itself − 
suppose we want to replace hard-disks with SSD − it should not have any impact on the logical data or schemas.